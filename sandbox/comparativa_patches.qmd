---
title: Prueba tensores patches con Tile T31TBF, para fechas 2021/10/02, 2021/10/07
jupyter: python3                                            
format:
  html:
    code-fold: true
---

Objetivos:
Quiero patches de 256x256, que son tensores de 4 dimensiones, 2 de imagen, 1 de banda/etiqueta y una de tiempo.
La idea es para cada patch crear las etiquetas cruzando los polígonos en el archivo gpkg enviado por Martin y quedarnos con 
los patches que tengan densidad de etiquetas suficientes.

Los patches los tengo que crear antes de leer.


```{python}
import time
from pathlib import Path
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

import rasterio
import xarray as xr

import geopandas as gpd
import contextily as cx


from shapely.geometry import box
import rasterio


```

## Funciones Auxiliares
```{python}
# Para acceder archivos de productos
def path2band(path):
    '''
    Obtiene el código de banda de un producto Sentinel-2 a partir de su path.
    '''
    return str(path).split("/")[-1].split("_")[-2]

def path2date(path):
    '''
    Entrega el datetime asociado a un producto Sentinel-2 a partir de su path.
    '''
    return pd.to_datetime(str(path).split("/")[-1].split("_")[1][:8])

def get_band_paths(product_path):
    return list(product_path.glob(
        f"*_*_B*"
        ))

# Para trabajar patches
def patch_coors(n, patch_size=256, array_size=1830):
    '''
    Retorna las coordenadas del punto superior izquierdo del patch n-ésimo
    '''
    lim = patch_size *(array_size // patch_size +1 )
    x = (n * patch_size) % lim
    if ((n+1) * patch_size) % lim == 0:
        x = array_size - patch_size

    y= ((n * patch_size) // lim) * patch_size
    if ((n * patch_size) // lim) * patch_size + patch_size > array_size:
        y = array_size - patch_size
    return (x,y)
#lim = array_size + (array_size % patch_size) #por si 256 no cabe exacto



def get_patch_xarray(xarray, n, patch_size=256):
    '''
    Retorna el patch n-ésimo
    '''
    array_size = xarray.x.size

    x_patch, y_patch = patch_coors(n, patch_size, array_size)
    return xarray.isel(
            x=slice(x_patch, x_patch + 256),
            y=slice(y_patch, y_patch + 256),
        )

def create_patch_tensor_xarray(products_paths, patch_n):
        multiband_tensors = []
        for product_path in products_paths:
            multiband_tensors.append(
                xr.concat([
                    get_patch_xarray(
                        xr.open_dataset(band_path, engine="rasterio", band_as_variable=True)
                        #.drop_dims("band")
                        .assign(band=path2band(band_path)).set_coords("band")
                        .assign(time=path2date(band_path)).set_coords("time"),
                        n = patch_n
                    )
                    for band_path in get_band_paths(product_path)
                ], dim="band")
            )
        return xr.concat(multiband_tensors, dim="time")

def get_patch_rasterio(raster_reader, n, patch_size=256):
    '''
    Retorna el patch n-ésimo a parter de un Dataset Reader de rasterio
    '''
    array_size = raster_reader.shape[0]

    x_patch, y_patch = patch_coors(n, patch_size, array_size)
    window = rasterio.windows.Window.from_slices(
            rows=slice(x_patch, x_patch + 256),
            cols=slice(y_patch, y_patch + 256),
        )
    return raster_reader.read( 1, window=window)

def create_patch_tensor_rasterio(products_paths, patch_n):
        frames = []
        for product_path in products_paths:
            band_arrays = []
            for band_path in get_band_paths(product_path):
                with rasterio.open(band_path) as src:
                    data = get_patch_rasterio(src, patch_n)
                    band_arrays.append(data)
            if len(band_arrays) == 12:
                stack = np.stack(band_arrays, axis=0)  # (bands, N, N)
                frames.append(stack)
        return np.stack(frames, axis=0)  # (temporal, bands, N, N)



```



## Comparación


```{python}
sentinel_crs = 'EPSG:32631'
s2_path = Path("../data/productos")

dic_funciones = {
    "rasterio": create_patch_tensor_rasterio,
    "xarray": create_patch_tensor_xarray,
}
ejemplos_patches = np.random.choice(np.arange((10980//256+1)**2), 5)
for name, fun in dic_funciones.items():
    tiempos = []
    for n_patch in ejemplos_patches:
        start = time.time()
        patch_tensor = fun(
            products_paths=s2_path.glob(f"*"),
            patch_n=patch_n
        )
        end = time.time()
        tiempos.append += [end-start]
        print(f"tiempo {name} patch {patch_n}: {tiempos[-1]} [s]")
    print(f"tiempo {name} promedio: {np.array(tiempos).mean()} [s]")
    plt.plot(ejemplos_patches, tiempos, label=name)
plt.legend()
plt.show()
```
```{python}
patch_n = 30

sentinel_crs = 'EPSG:32631'
s2_path = Path("../data/productos")


start = time.time()
rasterio_patch_tensor = create_patch_tensor_rasterio(
    products_paths=s2_path.glob(f"*"),
    patch_n=patch_n
)
end = time.time()
tiempo_rasterio = (end-start)
print(f"tiempo rasterio: {tiempo_rasterio} [s]")

start = time.time()
xarray_patch_tensor = create_patch_tensor_xarray(
    products_paths=s2_path.glob(f"*"),
    patch_n=patch_n
)
end = time.time()
tiempo_xarray = (end-start)
print(f"tiempo xarray: {tiempo_xarray} [s]")
```

```{python}
example_band_path = get_band_paths(product2_path)[1]
raster_rasterio = rasterio.open(example_band_path)

raster_xarray = xr.open_dataset(example_band_path, engine="rasterio")

patch_rasterio = get_patch_rasterio(raster, 30)
patch_xarray = get_patch(raster_xarray, 30).band_1.to_numpy()

patch_rasterio
patch_xarray

raster_xarray.band_data.isel(x=-1,y=-1)
plt.imshow(raster_rasterio.read(1))
plt.show()
```
#tiempo rasterio: 76.31076645851135
